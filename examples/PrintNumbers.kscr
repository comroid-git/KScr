package org.comroid.kscr.test;

import org.comroid.kscr.core.Throwable;

public class PrintNumbers implements Throwable {
    public static int StackSize -> 64;
    public int StackValue -> 48;
    public str Message -> "hello world";
    public int ExitCode -> 3;
    
    public PrintNumbers() {}
    
    // prints numbers 0 to 11
    public static void main() {
        void range = 0~12; // todo: range as non-compile-time constant 
        
        stdio << "print numbers " + range.start() + " to (exclusive) " + (range.end() - 1 + 1) + ":";
        forn (i : range)
            stdio << i;
        
        stdio << "and now backwards bcs we're cool:";
        for (int i = range.end(); i; --i) {
            stdio << i;
        }
            
        PrintNumbers obj = new PrintNumbers();
        obj.throingMethod(null);
        
        stdio << "length of ABC is " + "ABC".length();
        //todo: static methods NEED the class definition currently 
        PrintNumbers.printSomething("StackSize: "+PrintNumbers.StackSize+"; range was = " + range, 6345);
        
        // forever print something to test for loop robustness
        // todo: this does not compile. find solution for empty statements
        //for (;;) stdio << "abc";
        
        stdio << "look at my cool object: " + obj.toString(0);
        stdio << "and of course i can access it this way too: " + obj.StackValue;
        
        obj.callThroingMethod();
    }
    
    public str toString(short variant) {
        return "Items in stack: " + StackValue + "/" + PrintNumbers.StackSize;
    }
    
    public void callThroingMethod() {
        this.throingMethod(true);
    }
    public void throingMethod(byte thr) {
        stdio << "This is another method. Will it throw? " + thr;
        
        if (thr)
            throw this;
    }
    
    public static void printSomething(str textToPrint, int andAnInteger) {
        stdio << "Print this: " + textToPrint + andAnInteger;
    }
}
