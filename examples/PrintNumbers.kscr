package org.comroid.kscr.test;

import org.comroid.kscr.core.Throwable;
import org.comroid.kscr.core.Iterable;

public class PrintNumbers implements Throwable {
    public static int StackSize => 64;
    public int StackValue => 48;
    // we can add a setter implementation here
    public str Message { get; set; }
    public int ExitCode => -3;
    
    static {
        stdio <<- "this is a static initializer" + endl;
    }
    
    public PrintNumbers() {
        this.Message = "hello world";
    }
    
    // prints numbers 0 to 11
    public static void main() {
        int start = 0;
        int end = 24;
        
        // test shorthand ops
        // TODO: make parentheses for parsing order obsolete (-> antlr grammar order)
        stdio <<- "24 (24) = " + (end) + " (" + end + ")" + endl;
        stdio <<- "25 (25) = " + (++end) + " (" + end + ")" + endl;
        stdio <<- "25 (24) = " + (end--) + " (" + end + ")" + endl;
        stdio <<- "23 (23) = " + (--end) + " (" + end + ")" + endl;
        stdio <<- "23 (24) = " + (end++) + " (" + end + ")" + endl;
        stdio <<- "23 = " + 23 + endl;
        stdio <<- "24 = " + 24 + endl;
        stdio <<- "25 = " + 25 + endl;
        
        Iterable seq = start..end;
        
        stdio <<- "print numbers " + seq.start() + " to (exclusive) " + (seq.end() - 1 + 1) + ":" + endl;
        foreach (i : seq)
            stdio <<- "," + i;
        stdio <<- endl;
        //stdio <<- "i is now " + i; // should error (it did last time)
        
        stdio <<- "and now backwards bcs we're cool:" + endl;
        for (int i = end; i; --i) {
            stdio <<- "," + i.toString(16);
        }
        stdio <<- endl;
        
        stdio <<- "and one last time:" + endl;
        do {
            stdio <<- "," + end.toString(8);
        } while (end--);
        stdio <<- endl + "end is now " + end + endl; // should be -1
            
        PrintNumbers obj = new PrintNumbers();
        obj.throingMethod(false);
        
        stdio <<- "length of ABC is " + "ABC".length() + endl;
        //todo: static methods NEED the class definition currently 
        PrintNumbers.printSomething("StackSize: " + PrintNumbers.StackSize + "; range was = " + seq + " -- int:", 6345);
        
        // forever print something to test for loop robustness
        // todo: this does not compile. find solution for empty statements
        //for (;;) stdio <<- "abc" + endl;
        obj.Message += " & world2";
        
        stdio <<- "look at my cool object: " + obj.toString(0) + endl;
        stdio <<- "and of course i can access it this way too: " + obj.StackValue + endl;
        
        stdio <<- "let's test for-loop recursion with an 8x8 matrix:" + endl;
        for (int y = 1; y < 9; y++) {
            for (int x = 1; x < 9; x++)
                stdio <<- " " + x + y + " -";
            stdio <<- endl;
        } finally stdio <<- "finally, we finish throwing:";
        
        obj.callThroingMethod();
    }
    
    public str toString(short variant) {
        return this.Message + " --- Items in stack: " + this.StackValue + "/" + PrintNumbers.StackSize;
    }
    
    public void callThroingMethod() {
        this.throingMethod(true);
    }
    public void throingMethod(byte thr) {
        stdio <<- "This is another method. Will it throw? " + thr + endl;
        
        if (true) { // any 'multipart' statement
            if (thr)
                throw this;
            stdio <<- "This only is printed when it does not throw" + endl;
        } finally stdio <<- "This sums up the throingMethod" + endl;
    }
    
    public static void printSomething(str textToPrint, int andAnInteger) {
        stdio <<- "Print this: " + textToPrint + endl
                <<- "and also print another line with an int: " + andAnInteger
                <<- endl;
    }
}
